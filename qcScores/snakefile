### Set global variables

SEED = 2718

IN_1 = "/home/projects/DNA_reconstruct/qcScores/input/qcscores_s1.fq.gz"
IN_2 = "/home/projects/DNA_reconstruct/qcScores/input/qcscores_s2.fq.gz"

# adapter sequences
ADPT_FILE = "/home/projects/DNA_reconstruct/gabrieldir/adapters.fa"
ADPT1 = "AGATCGGAAGAGCACACGTCTGAACTCCAGTCACCGATTCGATCTCGTATGCCGTCTTCTGCTTG"
ADPT2 = "AGATCGGAAGAGCGTCGTGTAGGGAAAGAGTGTAGATCTCGGTGGTCGCCGTATCATTT"

# output directories
OUTDIR = "/net/node07/home/projects/DNA_reconstruct/qcScores/output/"
OUTDIR_BEN = OUTDIR + "benchmarks/"
OUTDIR_SIM = OUTDIR + "simulations/"
OUTDIR_REC = OUTDIR + "reconstructions/"
OUTDIR_EVA = OUTDIR + "evaluation/"

# For some reason this path was used for leehom. I will not do this for now.
# LEEHOM = "/home/people/gabre/projects/leehom/src/leeHom"
LEEHOM = "/home/ctools/leeHom-1.2.15/src/leeHom" 
ADPTREM = "/home/ctools/adapterremoval-2.3.2/build/AdapterRemoval"
CLIPMERGE = "/home/ctools/ClipAndMerge-1.7.8/build/libs/ClipAndMerge-1.7.8.jar"
SEQTK = "/home/ctools/seqtk-1.3/seqtk"
ADNA = "/home/ctools/adna/adna-trim"
BBMERGE = "/home/ctools/bbmap_38_91/bbmerge.sh"
FASTP = "/home/ctools/fastp/fastp"
SEQPREP = "/home/ctools/SeqPrep-1.3.2/SeqPrep"

# path to evaluation script
EVAL_SCRIPT = "/home/projects/DNA_reconstruct/eval_qcScores.py"

# conda environment
CONDA_ENV = "/net/node07/home/projects/DNA_reconstruct/conda_env.yaml"


### Run all


rule all:
    input:
        OUTDIR_EVA + "all_qcs.csv"


### Reconstruction


rule leeHom:
    input:
        s1=IN_1,
        s2=IN_2
    output:
        OUTDIR_REC +"leeHom/qcscores_lh.fq.gz",
    params:
        out_prefix=OUTDIR_REC +"leeHom/qcscores_lh",
        rm1=OUTDIR_REC +"leeHom/qcscores_lh_r1.fq.gz", 
        rm2=OUTDIR_REC +"leeHom/qcscores_lh_r2.fq.gz",
        rm3=OUTDIR_REC +"leeHom/qcscores_lh.fail.fq.gz",
        rm4=OUTDIR_REC +"leeHom/qcscores_lh_r1.fail.fq.gz",
        rm5=OUTDIR_REC +"leeHom/qcscores_lh_r2.fail.fq.gz",
    benchmark:
        OUTDIR_BEN + "leeHom/qcscores_lh.tsv"
    run:
        shell(
            "{LEEHOM}"
            " --adapterFirstRead {ADPT1}"
            " --adapterSecondRead {ADPT2}"
            " --ancientdna"
            " -fq1 {input.s1}"
            " -fq2 {input.s2}"
            " -fqo {params.out_prefix}"
        )
        shell(
            "rm"
            " {params.rm1}"
            " {params.rm2}"
            " {params.rm3}"
            " {params.rm4}"
            " {params.rm5}"
        )


rule AdapterRemoval:
    input:
        s1=IN_1,
        s2=IN_2
    output:
        OUTDIR_REC + "AdapterRemoval/qcscores_ar.collapsed",
    params:
        out_prefix=OUTDIR_REC + "AdapterRemoval/qcscores_ar",
        rm1=OUTDIR_REC + "AdapterRemoval/qcscores_ar.pair1.truncated",
        rm2=OUTDIR_REC + "AdapterRemoval/qcscores_ar.pair2.truncated",
        rm3=OUTDIR_REC + "AdapterRemoval/qcscores_ar.singleton.truncated",
        rm4=OUTDIR_REC + "AdapterRemoval/qcscores_ar.discarded",
        rm5=OUTDIR_REC + "AdapterRemoval/qcscores_ar.collapsed.truncated",
        rm6=OUTDIR_REC + "AdapterRemoval/qcscores_ar.settings",
    benchmark:
        OUTDIR_BEN + "AdapterRemoval/qcscores_ar.tsv"
    run:
        shell(
            "{ADPTREM}"
            " --collapse"
            " --minlength 1"
            " --adapter1 {ADPT1}"
            " --adapter2 {ADPT2}"
            " --file1 {input.s1}"
            " --file2 {input.s2}"
            " --basename {params.out_prefix}"
            " --seed {SEED}"
        )
        shell(
            "rm"
            " {params.rm1}"
            " {params.rm2}"
            " {params.rm3}"
            " {params.rm4}"
            " {params.rm5}"
            " {params.rm6}"
        )


rule ClipAndMerge:
    input:
        s1=IN_1,
        s2=IN_2
    output:
        OUTDIR_REC +"ClipAndMerge/qcscores_cm.fq"
    benchmark:
        OUTDIR_BEN + "ClipAndMerge/qcscores_cm.tsv"
    shell:
        (
            "java -jar {CLIPMERGE}"
            " -in1 {input.s1}"
            " -in2 {input.s2}"
            " -f {ADPT1}"
            " -r {ADPT2}"
            " -o {output}"
            " -l 1"
            " -u /dev/null /dev/null"
        )


rule seqtk_adna_trim:
    input:
        s1=IN_1,
        s2=IN_2
    output:
        OUTDIR_REC +"seqtk_adna_trim/qcscores_at.fq",
    benchmark:
        OUTDIR_BEN + "seqtk_adna_trim/qcscores_at.tsv"
    shell:
        (
            "{SEQTK} mergepe"
            " {input.s1}"
            " {input.s2} |"
            " {ADNA}"
            " -l 1"
            " -t 1"
            " -"
            " > {output}"
        )


rule bbmerge:
    input:
        s1=IN_1,
        s2=IN_2
    output:
        m=OUTDIR_REC +"bbmerge/qcscores_bb.fq",
        #u1=OUTDIR_REC +"bbmerge/qcscores_pe1_bb.fq",
        #u2=OUTDIR_REC +"bbmerge/qcscores_pe2_bb.fq",
    benchmark:
        OUTDIR_BEN + "bbmerge/qcscores_bb.tsv"
    shell:
        (
            "{BBMERGE}"
            " in1={input.s1}"
            " in2={input.s2}"
            " out={output.m}"
            # " outu1={output.u1}"
            # " outu2={output.u2}"
            " adapter={ADPT_FILE}"
            " t=1"
            " mininsert=1"
            " mininsert0=1"
        )


rule fastp:
    input:
        s1=IN_1,
        s2=IN_2
    output:
        OUTDIR_REC +"fastp/qcscores_fp.fq",
    benchmark:
        OUTDIR_BEN + "fastp/qcscores_fp.tsv"
    shell:
        (
            "{FASTP}"
            " --merge "
            " --in1 {input.s1}"
            " --in2 {input.s2}"
            " --adapter_sequence {ADPT1}"
            " --adapter_sequence_r2 {ADPT2}"
            " --merged_out {output}"
            " --disable_length_filtering"
            " --length_required 1"
            " --json /dev/null"
            " --html /dev/null"
        )


rule SeqPrep:
    input:
        s1=IN_1,
        s2=IN_2
    output:
        OUTDIR_REC +"SeqPrep/qcscores_sp.fq.gz",
    benchmark:
        OUTDIR_BEN + "SeqPrep/qcscores_sp.tsv"
    shell:
        (
            "{SEQPREP}"
            " -f {input.s1}"
            " -r {input.s2}"
            " -s {output}"
            " -1 /dev/null"
            " -2 /dev/null"
            " -L 1"
            " -A {ADPT1}"
            " -B {ADPT2}"
        )


### Evaluation 


rule evaluate:
    "Run the evaluation script and zip all fasta and fastq files"
    input:
        lh=OUTDIR_REC +"leeHom/qcscores_lh.fq.gz",
        ar=OUTDIR_REC +"AdapterRemoval/qcscores_ar.collapsed",
        cm=OUTDIR_REC +"ClipAndMerge/qcscores_cm.fq",
        at=OUTDIR_REC +"seqtk_adna_trim/qcscores_at.fq",
        bb=OUTDIR_REC +"bbmerge/qcscores_bb.fq",
        fp=OUTDIR_REC +"fastp/qcscores_fp.fq",
        sp=OUTDIR_REC +"SeqPrep/qcscores_sp.fq.gz"
    output:
        lh_out=OUTDIR_EVA + "leeHom_qcs.csv",
        ar_out=OUTDIR_EVA + "AdapterRemoval_qcs.csv",
        cm_out=OUTDIR_EVA + "ClipAndMerge_qcs.csv",
        at_out=OUTDIR_EVA + "seqtk_adna_trim_qcs.csv",
        bb_out=OUTDIR_EVA + "bbmerge_qcs.csv",
        fp_out=OUTDIR_EVA + "fastp_qcs.csv",
        sp_out=OUTDIR_EVA + "SeqPrep_qcs.csv"
    conda:
        CONDA_ENV
    run:
        shell(
            "python3 {EVAL_SCRIPT}"
            " -s1 {IN_1}"
            " -s2 {IN_2}"
            " -m {input.lh}"
            " -o {output.lh_out}"
            " -t leeHom"
        )

        shell(
            "python3 {EVAL_SCRIPT}"
            " -s1 {IN_1}"
            " -s2 {IN_2}"
            " -m {input.ar}"
            " -o {output.ar_out}"
            " -t AdapterRemoval"
        )
        shell("gzip {input.ar}")

        shell(
            "python3 {EVAL_SCRIPT}"
            " -s1 {IN_1}"
            " -s2 {IN_2}"
            " -m {input.cm}"
            " -o {output.cm_out}"
            " -t ClipAndMerge"
        )
        shell("gzip {input.cm}")

        shell(
            "python3 {EVAL_SCRIPT}"
            " -s1 {IN_1}"
            " -s2 {IN_2}"
            " -m {input.at}"
            " -o {output.at_out}"
            " -t seqtk_adna_trim"
        )
        shell("gzip {input.at}")

        shell(
            "python3 {EVAL_SCRIPT}"
            " -s1 {IN_1}"
            " -s2 {IN_2}"
            " -m {input.bb}"
            " -o {output.bb_out}"
            " -t bbmerge"
        )
        shell("gzip {input.bb}")

        shell(
            "python3 {EVAL_SCRIPT}"
            " -s1 {IN_1}"
            " -s2 {IN_2}"
            " -m {input.fp}"
            " -o {output.fp_out}"
            " -t fastp"
        )
        shell("gzip {input.fp}")

        shell(
            "python3 {EVAL_SCRIPT}"
            " -s1 {IN_1}"
            " -s2 {IN_2}"
            " -m {input.sp}"
            " -o {output.sp_out}"
            " -t SeqPrep"
        )


rule merge_csv:
    input:
        OUTDIR_EVA + "leeHom_qcs.csv",
        OUTDIR_EVA + "AdapterRemoval_qcs.csv",
        OUTDIR_EVA + "ClipAndMerge_qcs.csv",
        OUTDIR_EVA + "seqtk_adna_trim_qcs.csv",
        OUTDIR_EVA + "bbmerge_qcs.csv",
        OUTDIR_EVA + "fastp_qcs.csv",
        OUTDIR_EVA + "SeqPrep_qcs.csv",
    output:  
        OUTDIR_EVA + "all_qcs.csv",
    shell:
        (
            "awk 'NR==1; FNR==1{{next}} 1' {OUTDIR_EVA}*qcs.csv"
            " > {OUTDIR_EVA}all_qcs.csv"
        )